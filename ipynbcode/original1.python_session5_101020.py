# -*- coding: utf-8 -*-
"""Python_Session5_101020.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oFJ7U85mmZO88BUtC17_9jajVZb7k52y
"""

v1, v2 = 10, 20

print(v1<v2)
if (v1 < v2) == True:
  print("v1 < v2")
else:
  print("v1 >= v2")

s1=12345 # True 1234562 False
s2=str(s1)
for ch in s2:
  print(ch)

s3 = "Hello"
s4 = s3[::-1]
print(s4)

s1 = "Hello Welcome to Python"
slen = len(s1)
print(slen)
index = slen - 1
while index >= 0:
  print(s1[index], end = " ")
  index -= 1

print(chr(65), ord('E'))
print(ord('0'))

l1 = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]

for index in range(len(l1)):
  l1[index] += 1
print (l1)

l1 = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]
l1 = [val + 1 for val in l1]
print(l1, type(l1))

l1 = [1, 2, 3, 4, 5]
l1 = [v1 for v1 in l1 for v2 in l1]
print(l1)
l1 = [1, 2, 3, 4, 5]
l1 = [(index, val) for index, val in enumerate(l1)]
print(l1)

l1 = [20, 13, 15, 30, 40]
for index, val in enumerate(l1):
  print(index, val)

l1 = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]
l1 = [val for val in l1 if val % 2 == 0]
print(l1)

l1 = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]
l1 = [val for val in l1 if val >= 5]
print(l1)

l1 = ["one", "two", "ten"]
l2 = [1, 2, 10]
res1 = zip(l1, l2)
print(res, type(res))

res2 = list(zip(l1, l2))
print(res2)

d1 = {v1: v2 for v1, v2 in zip(l1, l2)}
print(d1, type(d1))

l1 = range(1, 6)
s1 = {val ** 2 for val in l1}
print(s1, type(s1))

l1 = range(1, 6)
t1 = (val for val in l1)
print(t1, type(t1), tuple(t1))

l1 = [1, 2, 3, 4, 5]

def square(val: int) -> int:
  return val ** 2

res = map(square, l1)
print(res, type(res), list(res))
print(res, type(res), list(res))

res = map(lambda val: val ** 3, l1)
print(res, type(res), list(res))
print(res, type(res), list(res))

lf = lambda val: val ** 2
print(lf(5))

import random
l1 = []
for val in range(10):
  num = random.randint(-20, 20)
  l1.append(num)
print(l1)

def is_positive_num(val: int) -> int:
  return val > 0

def is_negative_num(val: int) -> int:
  return val <= 0

res = filter(is_positive_num, l1)
print(res, type(res), list(res))
print(res, type(res), list(res))

res = filter(is_negative_num, l1)
print(res, type(res), list(res))
print(res, type(res), list(res))

res = filter(lambda val: val <= 0, l1)
print(res, type(res), list(res))
print(res, type(res), list(res))

res = list(filter(lambda val: val <= 0, l1))
print(res, type(res), list(res))
print(res, type(res), list(res))

l1 = [20, 25, 34, 67, 78]
def sum_nums(n1: int, n2: int) -> int:
  return n1 + n2

print(sum_nums(10, 20))
import functools
res = functools.reduce(sum_nums, l1)
print(res)
res = functools.reduce(lambda v1, v2: v1 + v2, l1)
print(res)

l1 = ["hello", "world", "python"]
res = functools.reduce(lambda v1, v2: v1 + " " + v2, l1)
print(res)

class Employee:
  ''' Employee
  Class Sample
  '''
  empCount = 0 # Static Variable
  def __init__(self, name=" ", empid=0):
    print("Constructor")
    self.name = name # Class Variable
    self.empid = empid
    Employee.empCount += 1
  
  def get_details(self):
    return self.name, self.empid

  def set_details(self, myname, myempid):
    self.name = myname
    self.empid = myempid

  def employee_count(self):
    return Employee.empCount

e1, e2, e3 = Employee("Vijayraj", 12345), Employee("Sagar Jain", 12346), Employee()
print(e1.get_details(),e2.get_details(), e3.get_details())
e3.set_details("Sudipta Datta", 12347)
print(e1.get_details(),e2.get_details(), e3.get_details())
e4 = Employee("Ishita", 12348)
print(e1.employee_count(),e2.employee_count(), e3.employee_count(), e4.employee_count())
print(Employee.empCount)
print(Employee.__name__, Employee.__module__, Employee.__bases__, Employee.__dict__)
print(Employee.__doc__)

class Base(object):
  def __init__(self):
    print("Base")
  
  def myfunc(self):
    return "myfunc"

class Derived(Base):
  def __init__(self):
    super().__init__()
    print("Derived")

  def myderivedfunc(self):
    return "myderivedfunc"

b1 = Base()
d1 = Derived()
print(d1.myfunc())
print(d1.myderivedfunc())

class A:
  def __init__(self):
    print("A")
  def myfuncA(self):
    return "myfuncA"
  def myfunc(self):
    return "myfunc from A"

class B(A):
  def __init__(self):
    print("B")
  def myfuncB(self):
    return "myfuncB"
  def myfunc(self):
    return "myfunc from B"

class C(B):
  def __init__(self):
    print("C")

c1 = C()
print(c1.myfuncA(), c1.myfuncB())
print(C.mro())
print(B.__mro__)
print(c1.myfunc())

class A:
  def __init__(self):
    print("A")
  def myfuncA(self):
    return "myfuncA"
  def myfunc(self):
    return "myfunc from A"

class B:
  def __init__(self):
    print("B")
  def myfuncB(self):
    return "myfuncB"
  def myfunc(self):
    return "myfunc from B"

class C(B, A):
  def __init__(self):
    print("C")
c1 = C()
print(c1.myfuncA(), c1.myfuncB())
print(C.mro())
print(B.__mro__)
print(c1.myfunc())

v1, v2 = 10, 0 # Try with 10, "0"
res = v1//v2
print(res)
print("End")

v1, v2 = 10, 0
try:
  res = v1//v2
except:
  print("Zero division error, Not allowed")
else:
  print(res)
print("End")

v1, v2 = 10, "0"
try:
  res = v1//v2
except TypeError:
  print("Type Error, not allowed")
except:
  print("Zero division error, Not allowed")
else:
  print(res)
finally:
  print("In finally")
print("End")

assert True, "No change"
#assert False, "Something went wrong"
e1 = 2 * 3 - 6
assert e1, "Something went wrong"
print("End")

import math
#print (math.sqrt(-20))
num = int(input("Enter Number: "))
if num < 0:
  raise ValueError("SQRT not allowed for -ve numbers")
print(num ** 0.5)

fp = open("Sample.txt", "w")
fp.write("This is Python session 4\n")
fp.write("Cyber security Module\n")
fp.write("From Amity")
fp.close()

with open("Sample.txt") as fo:
  print(fo.read(10))
  print(fo.readline())
  print(fo.readlines())

with open("Sample.txt") as fo:
  print("***")
  print(fo.read())

with open("Sample.txt") as fo:
  print(fo.readlines())

with open("Sample.txt") as fo:
  print(list(fo)) # try with tuple(fo)

s1 = "abcdefghijklmnopqrstuvwxyz"
fo = open("Alphabets.txt", "w")
fo.write(s1)
fo.close()
with open("Alphabets.txt", "rb") as fo:
  print(fo.tell())
  fo.seek(3)
  print(fo.read(5))

  print(fo.tell())
  fo.seek(3, 1)
  print(fo.read(5))

  print(fo.tell())
  fo.seek(-3, 1)
  print(fo.read(5))

  print(fo.tell())
  fo.seek(-5, 2)
  print(fo.read(3))
  
  fo.seek(50, 2) # Not valid
  print(fo.read(5))

  fo.seek(5, 0) # Not valid for (-5, 0)
  print(fo.read(3))

l1 = [1, 2, 3, 4, 5]
il = iter(l1)
elem = il.__next__()
print(il, list(il), elem)

l1 = [1, 2, 3, 4, 5]
il = iter(l1)
while True:
  try:
    elem = il.__next__()
    print(il, elem)
  except:
    print("End of list")
    break
print("End")

l1 = [1, 2, 3]
il = iter(l1)
elem = il.__next__()
print(il, elem)
elem = il.__next__()
print(il, elem)
elem = il.__next__()
print(il, elem)
elem = il.__next__()
print(il, elem)

def reverse(data):
  print("In reverse")
  datalen = len(data) - 1
  for index in range(datalen, -1, -1):
    print("In for")
    yield data[index]
  print("End of reverse")

for char in reverse("python"):
  print(char)

l1 = [1, 2, 3, 4, 5]
l1.

